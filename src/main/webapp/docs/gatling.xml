<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Torturing Wildflies with Gatling Stress Tool</title>
<date>2015-05-03</date>
</info>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>This document will describe how to perform <emphasis role="strong">performance</emphasis> and <emphasis role="strong">load</emphasis> tests using <link xlink:href="http://gatling.io"><emphasis role="strong">Gatling</emphasis></link> stress tool.</simpara>
</chapter>
<chapter xml:id="_objectives">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>Setup Gatling in our <link xlink:href="https://github.com/rmpestano/cdi-crud">CDI Crud application</link>;</simpara>
</listitem>
<listitem>
<simpara>Creating the simulation;</simpara>
<itemizedlist>
<listitem>
<simpara>Stressing the REST API;</simpara>
</listitem>
<listitem>
<simpara>Stressing the web application;</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Continuous performance testing</simpara>
</listitem>
<listitem>
<simpara>Torturing wildfly application server through load test</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="_a_note_on_performance_x_load">
<title>A note on performance x load</title>
<simpara>Before reading this post it has to be clear the difference between both kind of tests:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Performance test</emphasis>: This kind of test aims to constantly check/monitor the system&#8217;s performance.
The test must fail when the system performance (under normal peak) is not considered good or is below expectations (eg: response time or throughput got worse when compared to a predefined limit).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Load test</emphasis>: is meant to test the system by constantly and steadily increasing the load on the system until it reaches a threshold limit.
The goal of load testing is to expose defects (eg: memory leaks) when application is under abnormal situation.</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="_why_gatling">
<title>Why Gatling?</title>
<simpara>The main advantage of <emphasis role="strong">Gatling</emphasis>, in my opinion, is that it is intuitive. When you write performance tests with gatling API you&#8217;re really describing user steps
so it is easy to <emphasis role="strong">understand</emphasis>, <emphasis role="strong">write</emphasis> and <emphasis role="strong">maintain</emphasis> the test.</simpara>
<simpara>For example, when using JMeter you hardly will write a simulation without the help of its GUI to record the test.</simpara>
<tip>
<simpara>XML is not a programming language ;)</simpara>
</tip>
<simpara>Another advantage is that gatling is based on actors model, netty and NIO. So what that means?</simpara>
<itemizedlist>
<listitem>
<simpara>it is asynchronous</simpara>
</listitem>
<listitem>
<simpara>non blocking I/O</simpara>
</listitem>
<listitem>
<simpara>each user runs on its thread</simpara>
</listitem>
<listitem>
<simpara>probably perform better then other stress tools</simpara>
</listitem>
<listitem>
<simpara>produces more reliable simulation (it&#8217;s more approximated to real application behaviour - mainly due to its threading model)</simpara>
</listitem>
</itemizedlist>
<simpara>Also IDE support is a big advantage</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ide-support.png" align="center"/>
</imageobject>
<textobject><phrase>ide support</phrase></textobject>
</mediaobject>
</informalfigure>
</chapter>
<chapter xml:id="_setup_gatling_in_our_project">
<title>Setup Gatling in our project</title>
<simpara>To configure the tool on our project we basically will use the gatling maven plugin as follows:</simpara>
<formalpara>
<title>pom.xml</title>
<para>
<screen>&lt;plugin&gt;
	&lt;groupId&gt;io.gatling&lt;/groupId&gt;
	&lt;artifactId&gt;gatling-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;2.1.5&lt;/version&gt;
	&lt;configuration&gt;
		&lt;dataFolder&gt;src/test/resources/data&lt;/dataFolder&gt; <co xml:id="CO1-1"/>
	&lt;/configuration&gt;
&lt;/plugin&gt;</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO1-1">
<para>External data (samples, user logins etc&#8230;&#8203;) to be used in the simulation.</para>
</callout>
</calloutlist>
<simpara>Also include the following maven dependency:</simpara>
<formalpara>
<title>pom.xml</title>
<para>
<screen>&lt;dependency&gt;
	&lt;groupId&gt;io.gatling.highcharts&lt;/groupId&gt;
	&lt;artifactId&gt;gatling-charts-highcharts&lt;/artifactId&gt;
	&lt;version&gt;2.1.5&lt;/version&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</screen>
</para>
</formalpara>
</chapter>
<chapter xml:id="_creating_the_simulation">
<title>Creating the simulation</title>
<simpara><emphasis>Simulation</emphasis> is the name (usually) given to performance tests because this kind of test try to simulate the application&#8217;s
usage under real circumstances or even abnormal (in case of load tests) situations like e.g putting/simulating a lot of users using the app at the same time.</simpara>
<simpara>A Gatling simulation is basically a scala file using an specific DSL which will performe calls (usually http) to application under test.</simpara>
<section xml:id="_a_simple_example">
<title>A simple example</title>

</section>
</chapter>
<chapter xml:id="_references">
<title>References</title>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xlink:href="http://pt.slideshare.net/swapnilvkotwal/gatling">http://pt.slideshare.net/swapnilvkotwal/gatling</link></simpara>
</listitem>
</orderedlist>
</chapter>
</book>